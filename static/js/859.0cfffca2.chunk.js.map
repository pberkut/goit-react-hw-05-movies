{"version":3,"file":"static/js/859.0cfffca2.chunk.js","mappings":"uNAGMA,GAAOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,qEAKJE,EAAmBF,EAAAA,GAAAA,GAAH,wGAOhBG,EAAkBH,EAAAA,GAAAA,GAAH,8QAgBfI,EAAaJ,EAAAA,GAAAA,IAAH,wFAMVK,EAAaL,EAAAA,GAAAA,EAAH,gE,SCEhB,EA3BmB,SAAC,GAAgB,IAAdM,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACN,EAAD,UACGI,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,aAA3B,EAAyCC,aAAzC,OACV,SAACX,EAAD,WACE,UAACJ,EAAD,CAAMgB,GAAE,kBAAaL,GAAMM,MAAO,CAAEC,KAAMV,GAA1C,WACE,SAACH,EAAD,CAAYc,IAAG,UAVJ,mCAUI,OAAsBN,GAAeO,IAAKR,KACzD,SAACN,EAAD,UAAaM,KACb,6BAAKS,OAAOC,SAASR,GAArB,WAJkBH,EADZ,KAWjB,C,+ICeD,EAvCa,WACX,OAA4BY,EAAAA,EAAAA,UAAS,IAArC,eAAOhB,EAAP,KAAeiB,EAAf,KA8BA,OA5BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBAEtBC,EAAkB,mCAAG,gHAEMC,EAAAA,EAAAA,IAAiBH,GAFvB,OAEjBI,EAFiB,OAGjBvB,EAASuB,EAAepB,KAC5B,kBAA6D,CAC3DC,GADF,EAAGA,GAEDC,MAFF,EAAOA,MAGLC,YAHF,EAAcA,YAIZC,aAJF,EAA2BA,aAKzBC,aALF,EAAyCA,aAAzC,IAQFS,EAAUjB,GAZa,gDAcvBwB,QAAQC,IAAR,MAduB,yDAAH,qDAoBxB,OAFAJ,IAEO,WACLF,EAAgBO,OACjB,CACF,GAAE,KAGD,iCACE,mDACA,SAACC,EAAA,EAAD,CAAY3B,OAAQA,MAGzB,C,+LCvCD4B,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCACVC,EAAc,CAClBC,QAASF,GAGLP,EAAgB,mCAAG,WAAMH,GAAN,uFACAS,EAAAA,EAAAA,IAAU,sBAAuB,CACtDI,OAAQF,EACRG,OAAQd,EAAgBc,SAHH,cACjBC,EADiB,yBAMhBA,EAASC,KAAKC,SANE,2CAAH,sDAShBC,EAAS,mCAAG,WAAOC,EAAOnB,GAAd,uFACOS,EAAAA,EAAAA,IAAU,gBAAiB,CAChDI,OAAQ,CACND,QAASF,EACTS,MAAAA,GAEFL,OAAQd,EAAgBc,SANV,cACVC,EADU,yBASTA,EAASC,KAAKC,SATL,2CAAH,wDAYTG,EAAU,mCAAG,WAAOC,EAASrB,GAAhB,uFACMS,EAAAA,EAAAA,IAAA,iBAAoBY,GAAW,CACpDR,OAAQF,EACRG,OAAQd,EAAgBc,SAHT,cACXC,EADW,yBAMVA,EAASC,MANC,2CAAH,wDASVM,EAAU,mCAAG,WAAOD,EAASrB,GAAhB,uFACMS,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAuC,CAC5DR,OAAQF,EACRG,OAAQd,EAAgBc,SAHT,cACXC,EADW,yBAMVA,EAASC,KAAKO,MANJ,2CAAH,wDASVC,EAAU,mCAAG,WAAOH,EAASrB,GAAhB,uFACMS,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAuC,CAC5DR,OAAQF,EACRG,OAAQd,EAAgBc,SAHT,cACXC,EADW,yBAMVA,EAASC,KAAKC,SANJ,2CAAH,uD","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Home/Home.jsx","services/themoviedb-API.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link as LinkStyled } from 'react-router-dom';\n\nconst Link = styled(LinkStyled)`\n  text-decoration: none;\n  color: inherit;\n`;\n\nconst MoviesListStyled = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst MovieItemStyled = styled.li`\n  list-style: none;\n  background-color: white;\n  border: 1px solid gray;\n  border-radius: 20px;\n  position: relative;\n  overflow: hidden;\n\n  transition: transform 200ms linear;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.06);\n  }\n`;\n\nconst ImageMovie = styled.img`\n  display: block;\n  width: 250px;\n  /* object-fit: cover; */\n`;\n\nconst TitleMovie = styled.p`\n  width: 250px;\n  text-align: center;\n`;\n\nexport { ImageMovie, MoviesListStyled, TitleMovie, MovieItemStyled, Link };\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport {\n  ImageMovie,\n  MovieItemStyled,\n  MoviesListStyled,\n  TitleMovie,\n  Link,\n} from './MoviesList.styled';\n\nconst BASE_URL_IMAGE = 'https://image.tmdb.org/t/p/w500';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesListStyled>\n      {movies.map(({ id, title, poster_path, release_date, vote_average }) => (\n        <MovieItemStyled key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <ImageMovie src={`${BASE_URL_IMAGE}${poster_path}`} alt={title} />\n            <TitleMovie>{title}</TitleMovie>\n            <p>({Number.parseInt(release_date)})</p>\n          </Link>\n        </MovieItemStyled>\n      ))}\n    </MoviesListStyled>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import { useEffect, useState } from 'react';\nimport { getTrendingToday } from '../../services/themoviedb-API';\nimport MoviesList from '../../components/MoviesList';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const abortController = new AbortController();\n\n    const fetchTrendingToday = async () => {\n      try {\n        const trendingMovies = await getTrendingToday(abortController);\n        const movies = trendingMovies.map(\n          ({ id, title, poster_path, release_date, vote_average }) => ({\n            id,\n            title,\n            poster_path,\n            release_date,\n            vote_average,\n          })\n        );\n        setMovies(movies);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchTrendingToday();\n\n    return () => {\n      abortController.abort();\n    };\n  }, []);\n\n  return (\n    <>\n      <h1>Trending movies today</h1>\n      <MoviesList movies={movies} />\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3b120c16b34f353f70d8604b6ed477b2';\nconst axiosParams = {\n  api_key: API_KEY,\n};\n\nconst getTrendingToday = async abortController => {\n  const response = await axios.get('/trending/movie/day', {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data.results;\n};\n\nconst getSearch = async (query, abortController) => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n    signal: abortController.signal,\n  });\n\n  return response.data.results;\n};\n\nconst getDetails = async (movieId, abortController) => {\n  const response = await axios.get(`/movie/${movieId}`, {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data;\n};\n\nconst getCredits = async (movieId, abortController) => {\n  const response = await axios.get(`/movie/${movieId}/credits`, {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data.cast;\n};\n\nconst getReviews = async (movieId, abortController) => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data.results;\n};\n\nexport { getTrendingToday, getSearch, getDetails, getCredits, getReviews };\n"],"names":["Link","styled","LinkStyled","MoviesListStyled","MovieItemStyled","ImageMovie","TitleMovie","movies","location","useLocation","map","id","title","poster_path","release_date","vote_average","to","state","from","src","alt","Number","parseInt","useState","setMovies","useEffect","abortController","AbortController","fetchTrendingToday","getTrendingToday","trendingMovies","console","log","abort","MoviesList","axios","API_KEY","axiosParams","api_key","params","signal","response","data","results","getSearch","query","getDetails","movieId","getCredits","cast","getReviews"],"sourceRoot":""}