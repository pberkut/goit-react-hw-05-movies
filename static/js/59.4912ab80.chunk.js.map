{"version":3,"file":"static/js/59.4912ab80.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx","../node_modules/nanoid/index.browser.js","services/themoviedb-API.js","utils/handleResponse.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link as LinkStyled } from 'react-router-dom';\n\nconst Link = styled(LinkStyled)`\n  text-decoration: none;\n  color: inherit;\n`;\n\nconst MoviesListStyled = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst MovieItemStyled = styled.li`\n  list-style: none;\n  background-color: white;\n  border: 1px solid gray;\n  border-radius: 20px;\n  position: relative;\n  overflow: hidden;\n\n  transition: transform 100ms linear;\n\n  &:hover,\n  &:focus {\n    transform: scale(1.05);\n  }\n`;\n\nconst ImageMovie = styled.img`\n  display: block;\n  width: 250px;\n`;\n\nconst TitleMovie = styled.p`\n  width: 250px;\n  text-align: center;\n  margin-top: 5px;\n  margin-bottom: 5px;\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nconst MovieYears = styled.p`\n  text-align: center;\n  margin-top: 5px;\n  margin-bottom: 5px;\n`;\n\nexport {\n  ImageMovie,\n  MoviesListStyled,\n  TitleMovie,\n  MovieItemStyled,\n  Link,\n  MovieYears,\n};\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport {\n  ImageMovie,\n  MovieItemStyled,\n  MoviesListStyled,\n  TitleMovie,\n  Link,\n  MovieYears,\n} from './MoviesList.styled';\nimport placeholderPoster from '../../images/placeholder-movie.webp';\n\nconst BASE_URL_IMAGE = 'https://image.tmdb.org/t/p/w500';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesListStyled>\n      {movies.map(({ id, title, poster_path, release_date }) => (\n        <MovieItemStyled key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <ImageMovie\n              src={\n                poster_path\n                  ? `${BASE_URL_IMAGE}${poster_path}`\n                  : placeholderPoster\n              }\n              alt={title}\n            />\n            <TitleMovie className=\"title\">{title}</TitleMovie>\n            <MovieYears>{Number.parseInt(release_date)}</MovieYears>\n          </Link>\n        </MovieItemStyled>\n      ))}\n    </MoviesListStyled>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { getSearch } from 'services/themoviedb-API';\nimport MoviesList from 'components/MoviesList';\nimport { nanoid } from 'nanoid';\nimport handleResponse from 'utils/handleResponse';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const [value, setValue] = useState(query);\n  const [reqId, setReqId] = useState(null);\n\n  useEffect(() => {\n    if (!query) return;\n\n    const abortController = new AbortController();\n\n    const fetchSearchMovie = async query => {\n      try {\n        const searchMovies = await getSearch(query, abortController);\n        const movies = handleResponse(searchMovies);\n        setMovies(movies);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchSearchMovie(query);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [query, reqId]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const queryValue = e.target.query.value.trim();\n\n    if (queryValue === '') {\n      setSearchParams({});\n      setMovies([]);\n      return;\n    }\n\n    setSearchParams({ query: queryValue });\n    setReqId(nanoid(1));\n  };\n\n  return (\n    <div>\n      <Link to=\"/\">⬅️ go back</Link>\n      <hr />\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          value={value}\n          onChange={e => setValue(() => e.target.value.trimStart())}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {<MoviesList movies={movies} />}\n    </div>\n  );\n};\n\nexport default Movies;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3b120c16b34f353f70d8604b6ed477b2';\nconst axiosParams = {\n  api_key: API_KEY,\n};\n\nconst getTrendingToday = async abortController => {\n  const response = await axios.get('/trending/movie/day', {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data.results;\n};\n\nconst getSearch = async (query, abortController) => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n    signal: abortController.signal,\n  });\n\n  return response.data.results;\n};\n\nconst getDetails = async (movieId, abortController) => {\n  const response = await axios.get(`/movie/${movieId}`, {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data;\n};\n\nconst getCredits = async (movieId, abortController) => {\n  const response = await axios.get(`/movie/${movieId}/credits`, {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data.cast;\n};\n\nconst getReviews = async (movieId, abortController) => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data.results;\n};\n\nexport { getTrendingToday, getSearch, getDetails, getCredits, getReviews };\n","const handleResponse = response =>\n  response.map(({ id, title, poster_path, release_date }) => ({\n    id,\n    title,\n    poster_path,\n    release_date,\n  }));\n\nexport default handleResponse;\n"],"names":["Link","styled","LinkStyled","MoviesListStyled","MovieItemStyled","ImageMovie","TitleMovie","MovieYears","movies","location","useLocation","map","id","title","poster_path","release_date","to","state","from","src","placeholderPoster","alt","className","Number","parseInt","useState","setMovies","useSearchParams","searchParams","setSearchParams","query","get","value","setValue","reqId","setReqId","useEffect","abortController","AbortController","fetchSearchMovie","getSearch","searchMovies","handleResponse","console","log","abort","onSubmit","e","preventDefault","queryValue","target","trim","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","type","name","onChange","trimStart","MoviesList","axios","API_KEY","axiosParams","api_key","getTrendingToday","params","signal","response","data","results","getDetails","movieId","getCredits","cast","getReviews"],"sourceRoot":""}