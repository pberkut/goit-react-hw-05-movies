{"version":3,"file":"static/js/59.362bb7a7.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx","../node_modules/nanoid/index.browser.js","services/themoviedb-API.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {movies.map(({ id, title }) => (\n        <li key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            {title}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MoviesList;\n","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { getSearch } from 'services/themoviedb-API';\nimport MoviesList from 'components/MoviesList';\nimport { nanoid } from 'nanoid';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const [value, setValue] = useState(query);\n  const [reqId, setReqId] = useState(null);\n\n  useEffect(() => {\n    if (!query) return;\n\n    const abortController = new AbortController();\n\n    const fetchSearchMovie = async query => {\n      try {\n        const searchMovies = await getSearch(query, abortController);\n        const movies = searchMovies.map(({ id, title }) => ({ id, title }));\n        setMovies(movies);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchSearchMovie(query);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [query, reqId]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const queryValue = e.target.query.value.trim();\n\n    if (queryValue === '') {\n      setSearchParams({});\n      setMovies([]);\n      return;\n    }\n\n    setSearchParams({ query: queryValue });\n    setReqId(nanoid(1));\n  };\n\n  return (\n    <div>\n      <Link to=\"/\">⬅️ go back</Link>\n      <hr />\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"query\"\n          value={value}\n          onChange={e => setValue(() => e.target.value.trimStart())}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {<MoviesList movies={movies} />}\n    </div>\n  );\n};\n\nexport default Movies;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '3b120c16b34f353f70d8604b6ed477b2';\nconst axiosParams = {\n  api_key: API_KEY,\n};\n\nconst getTrendingToday = async abortController => {\n  const response = await axios.get('/trending/movie/day', {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data.results;\n};\n\nconst getSearch = async (query, abortController) => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query,\n    },\n    signal: abortController.signal,\n  });\n\n  return response.data.results;\n};\n\nconst getDetails = async (movieId, abortController) => {\n  const response = await axios.get(`/movie/${movieId}`, {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data;\n};\n\nconst getCredits = async (movieId, abortController) => {\n  const response = await axios.get(`/movie/${movieId}/credits`, {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data.cast;\n};\n\nconst getReviews = async (movieId, abortController) => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: axiosParams,\n    signal: abortController.signal,\n  });\n\n  return response.data.results;\n};\n\nexport { getTrendingToday, getSearch, getDetails, getCredits, getReviews };\n"],"names":["movies","location","useLocation","map","id","title","to","state","from","useState","setMovies","useSearchParams","searchParams","setSearchParams","query","get","value","setValue","reqId","setReqId","useEffect","abortController","AbortController","fetchSearchMovie","getSearch","searchMovies","console","log","abort","onSubmit","e","preventDefault","queryValue","target","trim","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","type","name","onChange","trimStart","MoviesList","axios","API_KEY","axiosParams","api_key","getTrendingToday","params","signal","response","data","results","getDetails","movieId","getCredits","cast","getReviews"],"sourceRoot":""}